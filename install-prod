#!/usr/bin/env bash

PROJECT_DIR="/app"
RELAY_DIR="/deploy-relay"
DOCKER_DIR="$PROJECT_DIR/docker"
PROJECT_DIR_ENV="$PROJECT_DIR/.env"

DOMAIN="$DOCKER_DIR/server"

# Remote is always prod mode, to prevent debug in public
APP_ENV=prod

INSTALL_TIME="$(date '+%m-%d-%Y %T')"
INSTALL_ENV_VARS="/root/.env-install"
INSTALL_ERROR_LOG="/var/log/install-script-errors.log"

SETUP_ERRORS=()

if [ ! -f "$INSTALL_ENV_VARS" ]; then
  SETUP_ERRORS+="Missing $INSTALL_ENV_VARS file."
fi

# Environment variables checked below are in the .env-install file.
source "$INSTALL_ENV_VARS"

# Delete .env-install file
rm "$INSTALL_ENV_VARS"

if [ -z "$DEPLOY_ENV" ]; then
  SETUP_ERRORS+="DEPLOY_ENV variable is required."
fi

if [ -z "$SITE_USER" ]; then
  SETUP_ERRORS+="SITE_USER variable is required."
fi

if [ -z "$GIT_REPO" ]; then
  SETUP_ERRORS+="GIT_REPO variable is required."
fi

if [ -z "$SITE_USER_RSA_PRIV_KEY_VALUE" ]; then
  SETUP_ERRORS+="SITE_USER_RSA_PRIV_KEY_VALUE variable is required."
fi

if [ -z "$SITE_USER_RSA_PUB_KEY_VALUE" ]; then
  SETUP_ERRORS+="SITE_USER_RSA_PUB_KEY_VALUE variable is required."
fi

if [ "${#SETUP_ERRORS[*]}" -gt 0 ]; then
  touch "$INSTALL_ERROR_LOG"

  for SETUP_ERROR in "${SETUP_ERRORS[@]}"
  do
    echo "[$INSTALL_TIME] $SETUP_ERROR" >> "$INSTALL_ERROR_LOG"

    printf "\n%s\n" "Error(s) on installation. See $INSTALL_ERROR_LOG for details."
  done

  exit 1
fi

DEPLOY_BRANCH="main-stable"

if [ "$DEPLOY_ENV" == "dev" ]; then
  DEPLOY_BRANCH="main-edge"
fi

export PROJECT_DIR
export RELAY_DIR
export DOCKER_DIR
export DEPLOY_ENV
export SITE_USER
export GIT_REPO
export SITE_USER_RSA_PRIV_KEY_VALUE
export SITE_USER_RSA_PUB_KEY_VALUE

# This sets the variable $IPADDR to the IP address the new Linode receives.
IPADDR=$(ip -4 addr show eth0 | awk '/inet / { print $2 }' | sed 's/addr://')

# This section sets the Fully Qualified DOMAIN Name (FQDN) in the hosts file.
echo $IPADDR $FQDN $HOSTNAME >> /etc/hosts

# This updates the packages on the system from the distribution repositories.
apt-get update
apt-get -y upgrade

# This section sets the hostname.
echo $HOSTNAME > /etc/hostname
hostname -F /etc/hostname

# Docker
apt-get -y install docker.io

# For latest Docker Compose
add-apt-repository universe
apt-get -y install python3-pip
pip3 install docker-compose

systemctl start docker
systemctl enable docker

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

apt-get -y install git mlocate

INSTALL_SITE_USER="/root/install-site-user"

wget -q - https://raw.githubusercontent.com/jfdialogs/linode-scripts/main/install-site-user "$INSTALL_SITE_USER"

chmod u+x "$INSTALL_SITE_USER"

"$INSTALL_SITE_USER"

HAS_SITE_USER="$(getent passwd $SITE_USER)"

if [ -z "$HAS_SITE_USER" ]; then
  echo "Installation failed on missing site user $SITE_USER."

  exit 1
fi

if [ -d "$PROJECT_DIR" ]; then
  rm -d "$PROJECT_DIR"
fi

if [ -d "$RELAY_DIR" ]; then
  rm -d "$RELAY_DIR"
fi

mkdir "$PROJECT_DIR"
mkdir "$RELAY_DIR"

chown "$SITE_USER" "$PROJECT_DIR"
chown "$SITE_USER" "$RELAY_DIR"

chgrp "$SITE_USER" "$PROJECT_DIR"
chgrp "$SITE_USER" "$RELAY_DIR"

git config --global http.postBuffer 524288000

su -c "git clone -b $DEPLOY_BRANCH $GIT_REPO $PROJECT_DIR" - "$SITE_USER"

cd "$PROJECT_DIR"

su -c "cd $PROJECT_DIR; $DOMAIN install-remote-prod;" - "$SITE_USER"
su -c "cd $PROJECT_DIR; $DOMAIN install-hooks;" - "$SITE_USER"

source "$PROJECT_DIR_ENV"

chown -R www-data "$PROJECT_DIR"
chgrp -R www-data "$PROJECT_DIR"

su - "$SITE_USER"

cd "$PROJECT_DIR"

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCy+nXYhd4+KNEQruNE6CzzDbAJ2BU5Osum5pJz5iLh/uxGhOPhQVYGcOvIB4qNTKEMnV26K7yHsos88631i7qUs7yFuet3esNA3hPpMo9JmaZhzwhaX5zdMawqJRFxZa1q6xdfDyRngYMYqbz5DEhWSRhizX/tjjB/p/wRuhqZy7Dw6caL/2ivvTmxzJpgPoyyO9rwvda7a72UCw0ncY2+DDpk0131GVr9osw+u6han/bQeo3IpV+dCuF2TtXO33lbjUm405bEEOt4lnvaQq/QjXQmgDvrdpnzE78A5PAEcCyTGKfFFPpWUS/bkbrjLem9b8hySaLLkFJlwOVOp81P toff@MACBOOKPRO-F516.home" > "/home/$SITE_USER/.ssh/authorized_keys"
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+zP0sSYIn3dRuWdRKcrixx7XGYG6ABrLXZLTpob1ff9aVgOVzEdXcKi7WVluljeCgUnwSXE8Ul10g2WEzjrGFtHX0jM7LdLzPuW45ZGlyHeROUBeG0iHi4IUvOI+MXlng4qHhkB/9A9KN87Lb93R5z0eLoizqwF6t2Btyp9dhtmY4LofRERj1G/5E4jDFnY2SGlk1VYlliF1i+3/9J86OFxTBfCoc+az6Py1yfVZSf9ASfGlDgaWKwjYtN6HDfMwg3hxf05dW2lx5BwjZYWs/ClihEiKbOf7A/b1V0AHRkc0Q0mR7TrNnINvHgeWTkor2dWYraVw9o4bqEFlIyqmT jf@MacBook-Pro.local" >> "/home/$SITE_USER/.ssh/authorized_keys"
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAsch05pJcSqZ4QHAFEwmQ0te7XWXL3IfiG1cNljOozuowKn7z7Of6zSshT5LTsPJoYTfizxs+t9KdG9SCTKpw9a3G8ZF/sE+cUHuzDaXiYyblrclgfAr2ouz2MBuQoCN9waTN1SpLAwxBd4CBzGuVU3EYcuCBa04UT22YgC5g6ptgKK4rX4NhFxMbcYqoxSjQB0kLx1Am5aLlBYGLj5rpQBhnwfOr7ajsEl+U9sSIFL7dCDPVw/j5rFSLVdafIgu/T8lcdGYWey92QDgy1YN9xOdRh/MbPnoLkpjUxCGRpoFgCZU+o4CgZLE5daxMotYjZ3rsxnwvZvQVFZZQuobGPw== md@dialogs.com:rsa-key-20200825" >> "/home/$SITE_USER/.ssh/authorized_keys"
