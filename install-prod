#!/usr/bin/env bash

PROJECT_DIR="/app"
RELAY_DIR="/deploy-relay"
DOCKER_DIR="$PROJECT_DIR/docker"

# Remote is always prod
APP_ENV=prod

INSTALL_ENV_VARS="/root/.env-install"
INSTALL_ERROR_LOG="/var/log/install-script-errors.log"

SETUP_ERRORS=()

if [ -f "$INSTALL_ENV_VARS" ]; then
  source "$INSTALL_ENV_VARS"

  # Delete .env-install file
  rm "$INSTALL_ENV_VARS"
fi

if [ -z "$DEPLOY_ENV" ]; then
  SETUP_ERRORS+="DEPLOY_ENV variable is required."
fi

if [ -z "$SITE_USER" ]; then
  SETUP_ERRORS+="SITE_USER variable is required."
fi

if [ -z "$GIT_REPO" ]; then
  SETUP_ERRORS+="GIT_REPO variable is required."
fi

if [ -z "$SITE_USER_RSA_PRIV_KEY_VALUE" ]; then
  SETUP_ERRORS+="SITE_USER_RSA_PRIV_KEY_VALUE variable is required."
fi

if [ -z "$SITE_USER_RSA_PUB_KEY_VALUE" ]; then
  SETUP_ERRORS+="SITE_USER_RSA_PUB_KEY_VALUE variable is required."
fi

if [ "${#SETUP_ERRORS[*]}" -gt 0 ]; then
  touch "$INSTALL_ERROR_LOG"

  echo "$(date '+%m-%d-%Y %T')" >> $INSTALL_ERROR_LOG

  for SETUP_ERROR in "${SETUP_ERRORS[@]}"
  do
    echo "$SETUP_ERROR" >> "$INSTALL_ERROR_LOG"
  done

  exit
fi

if [ "$DEPLOY_ENV" == "dev" ]; then
  DEPLOY_BRANCH=main-edge
elif [ "$DEPLOY_ENV" == "prod" ]; then
  DEPLOY_BRANCH=main-stable
fi

export PROJECT_DIR
export RELAY_DIR
export DOCKER_DIR
export DEPLOY_ENV
export SITE_USER
export GIT_REPO
export SITE_USER_RSA_PRIV_KEY_VALUE
export SITE_USER_RSA_PUB_KEY_VALUE

# This sets the variable $IPADDR to the IP address the new Linode receives.
IPADDR=$(ip -4 addr show eth0 | awk '/inet / { print $2 }' | sed 's/addr://')

# This section sets the Fully Qualified Domain Name (FQDN) in the hosts file.
echo $IPADDR $FQDN $HOSTNAME >> /etc/hosts

# This updates the packages on the system from the distribution repositories.
apt-get update
apt-get -y upgrade

# This section sets the hostname.
echo $HOSTNAME > /etc/hostname
hostname -F /etc/hostname

# For latest Docker Compose
add-apt-repository universe
apt-get -y install python3-pip
pip3 install docker-compose

# Docker
#apt-get -y install docker.io

systemctl start docker
systemctl enable docker

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

apt-get -y install git mlocate

bash <(wget -qO - https://raw.githubusercontent.com/jfdialogs/linode-scripts/main/install-site-user)

HAS_SITE_USER="$(getent passwd $SITE_USER)"

if [ -d "$PROJECT_DIR" ]; then
  rm -d "$PROJECT_DIR"
fi

if [ -d "$RELAY_DIR" ]; then
  rm -d "$RELAY_DIR"
fi

mkdir "$PROJECT_DIR"
mkdir "$RELAY_DIR"

cd "$PROJECT_DIR"

chown -R "$SITE_USER" "$PROJECT_DIR"
chown -R "$SITE_USER" "$RELAY_DIR"
chgrp -R "$SITE_USER" "$PROJECT_DIR"
chgrp -R "$SITE_USER" "$RELAY_DIR"

git config --global http.postBuffer 524288000

su -c "git clone -b $DEPLOY_BRANCH $GIT_REPO $PROJECT_DIR" - "$SITE_USER"

"$DOCKER_DIR/server" install-remote-prod
"$DOCKER_DIR/server" install-hooks

cd "$PROJECT_DIR"

source "$PROJECT_DIR/.env"

chown www-data "$PROJECT_DIR"
chgrp www-data "$PROJECT_DIR"
